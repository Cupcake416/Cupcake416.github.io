{"title":"「BZOJ2879」[Noi2012]美食节","date":"2018-03-08T07:43:29.000Z","excerpt":"","slug":"「BZOJ2879」-Noi2012-美食节","updated":"2018-07-17T15:48:37.076Z","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>共有$n$道菜，$m$个厨师，给出每个厨师做每道菜的时间。现在有$p_i$个同学点了第$i$道菜，问如何安排做菜方案，使同学的总等待时间最短。如果一个同学点的菜是某个厨师做的第$k$道菜，则他的等待时间就是这个厨师制作前$k$道菜的时间之和。而总等待时间为所有同学的等待时间之和。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>这道题就是<a href=\"http://blog.mycup.cc/2018/03/08/%E3%80%8CBZOJ1070%E3%80%8D-SCOI2007-%E4%BF%AE%E8%BD%A6/\" target=\"_blank\" rel=\"noopener\">「BZOJ1070」[SCOI2007]修车</a>的加强版。</p>\n<p>思路和做法都十分相似。</p>\n<p>但是如果一开始把全部边连上会T。</p>\n<p>我们发现每个厨师肯定会优先去走等待人数少的点，那么其他的边多出来就白白增加了跑spfa用的时间。</p>\n<p>所以考虑动态连边，一开始只连最后做的菜，跑费用流的过程中连上下一条边。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">50</span>,M=<span class=\"number\">110</span>,NN=<span class=\"number\">100010</span>,oo=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,cost[N][M],tot,s,t,p[N],rank[NN],c[NN];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> isend[NN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,flow,cap,w;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge_tot;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt;edge;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;point[NN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> cc,<span class=\"keyword\">int</span> ww)</span></span>&#123;</span><br><span class=\"line\">    edge.push_back((Edge)&#123;f,t,<span class=\"number\">0</span>,cc,ww&#125;);</span><br><span class=\"line\">    point[f].push_back(edge_tot++);</span><br><span class=\"line\">    edge.push_back((Edge)&#123;t,f,<span class=\"number\">0</span>,<span class=\"number\">0</span>,-ww&#125;);</span><br><span class=\"line\">    point[t].push_back(edge_tot++);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[NN],pre[NN];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> inq[NN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;i++) dis[i]=oo;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    dis[s]=<span class=\"number\">0</span>,inq[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        x=q.front();q.pop();</span><br><span class=\"line\">        inq[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[x].size();i++)&#123;</span><br><span class=\"line\">            Edge&amp; e=edge[point[x][i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(e.cap&lt;=e.flow) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[x]+e.w&lt;dis[e.to])&#123;</span><br><span class=\"line\">                dis[e.to]=dis[x]+e.w,pre[e.to]=point[x][i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!inq[e.to])&#123;inq[e.to]=<span class=\"number\">1</span>;q.push(e.to);&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[t]&lt;oo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mincostmaxflow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,f,now;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        f=oo,now=t;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now!=s)&#123;</span><br><span class=\"line\">            f=min(f,edge[pre[now]].cap-edge[pre[now]].flow);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isend[now])&#123;</span><br><span class=\"line\">                isend[now]=<span class=\"number\">0</span>,isend[++tot]=<span class=\"number\">1</span>,rank[tot]=rank[now]+<span class=\"number\">1</span>,c[tot]=c[now];</span><br><span class=\"line\">                add_edge(tot,t,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n+<span class=\"number\">2</span>;i++) add_edge(i,tot,<span class=\"number\">1</span>,rank[tot]*cost[i<span class=\"number\">-2</span>][c[tot]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            now=edge[pre[now]].from;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans+=dis[t]*f,now=t;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now!=s)&#123;</span><br><span class=\"line\">            edge[pre[now]].flow+=f,edge[pre[now]^<span class=\"number\">1</span>].flow-=f;</span><br><span class=\"line\">            now=edge[pre[now]].from;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;p[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cost[i][j]);</span><br><span class=\"line\">    s=++tot,t=++tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) add_edge(s,++tot,p[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        add_edge(++tot,t,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        rank[tot]=<span class=\"number\">1</span>,c[tot]=i,isend[tot]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">3</span>;j&lt;=n+<span class=\"number\">2</span>;j++) add_edge(j,i+n+<span class=\"number\">2</span>,<span class=\"number\">1</span>,cost[j<span class=\"number\">-2</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=mincostmaxflow();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"「BZOJ2038」小Z的袜子","slug":"「BZOJ2038」小Z的袜子"},"next":{"title":"「BZOJ1834」[ZJOI2010]网络扩容","slug":"「BZOJ1834」-ZJOI2010-网络扩容"},"link":"/2018/03/08","toc":[{"title":"题目大意","id":"题目大意","index":"1"},{"title":"解析","id":"解析","index":"2"},{"title":"代码","id":"代码","index":"3"}]}