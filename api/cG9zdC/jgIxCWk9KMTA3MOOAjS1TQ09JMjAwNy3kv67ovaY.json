{"title":"「BZOJ1070」[SCOI2007]修车","date":"2018-03-08T05:20:35.000Z","excerpt":"","slug":"「BZOJ1070」-SCOI2007-修车","updated":"2018-07-15T15:10:33.559Z","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>同一时刻有$N$位车主带着他们的爱车来到了汽车维修中心。维修中心共有$M$位技术人员，不同的技术人员对不同的车进行维修所用的时间是不同的。现在需要安排这$M$位技术人员所维修的车及顺序，使得顾客平均等待的时间最小。顾客的等待时间是指从他把车送至维修中心到维修完毕所用的时间。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>求平均时间最小，也就是求总时间最小。</p>\n<p>某个技术人员在修某一辆车时对总时间的贡献是 $time * 在排队的人数$。</p>\n<p>所以可以想到把技术人员拆成$n$个点${m_{i1},m_{i2},……,m_{in}​}$，分别对应队伍中有1，2，……，n个人的情况。</p>\n<p>对于每个顾客，向$m_{ij}$​连一条容量为1，花费为 $time * j$ 的边。</p>\n<p>求这个二分图的最大权匹配即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">1000</span>,oo=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,ss,tt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,flow,cap,cost;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> _from=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _to=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _flow=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _cap=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _cost=<span class=\"number\">0</span>):from(_from),to(_to),flow(_flow),cap(_cap),cost(_cost)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Edge&gt;edge;</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge_tot;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;point[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> cc)</span></span>&#123;</span><br><span class=\"line\">    edge.push_back(Edge(f,t,<span class=\"number\">0</span>,c,cc));</span><br><span class=\"line\">    point[f].push_back(edge_tot++);</span><br><span class=\"line\">    edge.push_back(Edge(t,f,<span class=\"number\">0</span>,<span class=\"number\">0</span>,-cc));</span><br><span class=\"line\">    point[t].push_back(edge_tot++);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],pre[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">127</span>/<span class=\"number\">2</span>,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    q.push(ss);</span><br><span class=\"line\">    dis[ss]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        x=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[x].size();i++)&#123;</span><br><span class=\"line\">            Edge&amp; e=edge[point[x][i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(e.cap&gt;e.flow&amp;&amp;dis[e.to]&gt;dis[x]+e.cost)&#123;</span><br><span class=\"line\">                dis[e.to]=dis[x]+e.cost,pre[e.to]=point[x][i];</span><br><span class=\"line\">                q.push(e.to);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[tt]&lt;oo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mincostmaxflow</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now,minf,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(spfa())&#123;</span><br><span class=\"line\">        minf=oo,now=tt;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now!=ss)&#123;</span><br><span class=\"line\">            minf=min(minf,edge[pre[now]].cap-edge[pre[now]].flow);</span><br><span class=\"line\">            now=edge[pre[now]].from;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        now=tt,ans+=minf*dis[tt];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now!=ss)&#123;</span><br><span class=\"line\">            edge[pre[now]].flow+=minf,edge[pre[now]^<span class=\"number\">1</span>].flow-=minf;</span><br><span class=\"line\">            now=edge[pre[now]].from;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    ss=n*m+n+<span class=\"number\">1</span>,tt=ss+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;t1);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++) add_edge(m*n+i,k*m+j,<span class=\"number\">1</span>,t1*(k+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) add_edge(ss,i+m*n,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m*n;i++) add_edge(i,tt,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\"</span>,<span class=\"number\">1.0</span>*mincostmaxflow()/n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"「luogu1880」[NOI1995]石子合并","slug":"「luogu1880」-NOI1995-石子合并"},"next":{"title":"「luogu2714」四元组统计","slug":"「luogu2714」四元组统计"},"link":"/2018/03/08","toc":[{"title":"题目大意","id":"题目大意","index":"1"},{"title":"解析","id":"解析","index":"2"},{"title":"代码","id":"代码","index":"3"}]}