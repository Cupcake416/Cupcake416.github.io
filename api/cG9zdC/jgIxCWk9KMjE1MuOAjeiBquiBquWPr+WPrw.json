{"title":"「BZOJ2152」聪聪可可","date":"2018-03-08T05:52:14.000Z","excerpt":"","slug":"「BZOJ2152」聪聪可可","updated":"2018-07-17T12:10:54.198Z","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给一棵带边权的树，任意选取两个点，求它们之间的路径边权和为3的倍数的概率。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>相当于求边权和为3的倍数的路径条数。</p>\n<p>考虑点分治。</p>\n<p>选取根后，分别统计出每个子树中到根的距离mod 3为0，1，2的节点个数，计算答案即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">20010</span>,oo=INT_MAX;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot,root,f[N],siz[N],dep_cnt[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,len;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> _to=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _len=<span class=\"number\">0</span>):to(_to),len(_len)&#123;&#125;</span><br><span class=\"line\">&#125;edge[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge_tot;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;point[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> l)</span></span>&#123;</span><br><span class=\"line\">    edge[edge_tot]=Edge(t,l);</span><br><span class=\"line\">    point[f].push_back(edge_tot++);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    f[k]=<span class=\"number\">0</span>,siz[k]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[k].size();i++)&#123;</span><br><span class=\"line\">        Edge&amp; e=edge[point[k][i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e.to==fa||vis[e.to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getroot(e.to,k);</span><br><span class=\"line\">        siz[k]+=siz[e.to];</span><br><span class=\"line\">        f[k]=max(f[k],siz[e.to]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[k]=max(f[k],tot-siz[k]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[root]&gt;f[k]) root=k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    dep_cnt[d]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[k].size();i++)&#123;</span><br><span class=\"line\">        Edge&amp; e=edge[point[k][i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e.to==fa||vis[e.to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dfs(e.to,k,(d+e.len)%<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep_cnt,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dep_cnt));dfs(k,<span class=\"number\">0</span>,d);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dep_cnt[<span class=\"number\">0</span>]*(dep_cnt[<span class=\"number\">0</span>]<span class=\"number\">-1</span>)+<span class=\"number\">2</span>*dep_cnt[<span class=\"number\">1</span>]*dep_cnt[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    vis[k]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans+=calc(k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[k].size();i++)&#123;</span><br><span class=\"line\">        Edge&amp; e=edge[point[k][i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[e.to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans-=calc(e.to,e.len);</span><br><span class=\"line\">        root=<span class=\"number\">0</span>,tot=siz[e.to];</span><br><span class=\"line\">        getroot(e.to,<span class=\"number\">0</span>);</span><br><span class=\"line\">        work(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1,t2,t3;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=oo;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;t1,&amp;t2,&amp;t3);</span><br><span class=\"line\">        add_edge(t1,t2,t3%<span class=\"number\">3</span>);</span><br><span class=\"line\">        add_edge(t2,t1,t3%<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root=<span class=\"number\">0</span>,tot=n;</span><br><span class=\"line\">    getroot(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    work(root);</span><br><span class=\"line\">    ans+=n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans2=n*n,g=gcd(ans,ans2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d/%d\"</span>,ans/g,ans2/g);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"「luogu2664」树上游戏","slug":"「luogu2664」树上游戏"},"next":{"title":"「POJ1741」Tree","slug":"「POJ1741」Tree"},"link":"/2018/03/08","toc":[{"title":"题目大意","id":"题目大意","index":"1"},{"title":"解析","id":"解析","index":"2"},{"title":"代码","id":"代码","index":"3"}]}