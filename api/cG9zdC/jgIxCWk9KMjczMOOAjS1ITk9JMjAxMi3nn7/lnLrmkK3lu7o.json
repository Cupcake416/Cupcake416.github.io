{"title":"「BZOJ2730」[HNOI2012]矿场搭建","date":"2018-03-08T05:24:32.000Z","excerpt":"","slug":"「BZOJ2730」-HNOI2012-矿场搭建","updated":"2018-07-16T15:27:25.512Z","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给一个无向图，需要在某些点设立出口，使无论删除图中的哪个点，图中的每个联通块中至少存在一个出口，求至少设置几个出口，以及设置的方案总数。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>如果删除的点不是割点，那么只要设置两个及以上的出口就一定能出去。</p>\n<p>如果是割点的话就会分离出一个联通块。</p>\n<p>因此我们求出所有割点，dfs一遍整个图。</p>\n<p>一个联通块会被分离当且仅当它周围只有一个割点，在这种联通块里设立一个出口即可。</p>\n<p>注意处理特殊情况，当一个图中没有割点时要设立两个出口。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">510</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,T,ans1,cnt,siz,dfn[N],low[N],timer;</span><br><span class=\"line\">ll ans2;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N],iscut[N],viscut[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> _from=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _to=<span class=\"number\">0</span>):from(_from),to(_to)&#123;&#125;</span><br><span class=\"line\">&#125;edge[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;point[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge_tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    edge[edge_tot]=Edge(f,t);</span><br><span class=\"line\">    point[f].push_back(edge_tot++);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ff[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ff[k]=fa;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> child=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfn[k]=low[k]=++timer;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=point[k].size()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        Edge&amp; e=edge[point[k][i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[e.to])&#123;</span><br><span class=\"line\">            child++;</span><br><span class=\"line\">            tarjan(e.to,k);</span><br><span class=\"line\">            low[k]=min(low[k],low[e.to]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(low[e.to]&gt;=dfn[k]) iscut[k]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[e.to]&lt;dfn[k]&amp;&amp;e.to!=fa) low[k]=min(dfn[e.to],low[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fa&amp;&amp;child==<span class=\"number\">1</span>) iscut[k]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> pre)</span></span>&#123;</span><br><span class=\"line\">    vis[k]=<span class=\"number\">1</span>,siz++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;point[k].size();i++)&#123;</span><br><span class=\"line\">        Edge&amp; e=edge[point[k][i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iscut[e.to]&amp;&amp;!viscut[e.to]) viscut[e.to]=<span class=\"number\">1</span>,cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iscut[e.to]||pre==e.to||vis[e.to])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dfs(e.to,k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1,t2,tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    ans1=edge_tot=<span class=\"number\">0</span>,ans2=<span class=\"number\">1</span>,timer=<span class=\"number\">0</span>;</span><br><span class=\"line\">    T++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;t1,&amp;t2);add_edge(t1,t2);add_edge(t2,t1);tot=max(tot,max(t1,t2));&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;i++) <span class=\"keyword\">if</span>(!dfn[i]) tarjan(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;i++) <span class=\"keyword\">if</span>(!iscut[i]&amp;&amp;!vis[i])&#123;</span><br><span class=\"line\">        cnt=siz=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(viscut,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(viscut));</span><br><span class=\"line\">        dfs(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!cnt) ans1+=<span class=\"number\">2</span>,ans2*=siz*(siz<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cnt==<span class=\"number\">1</span>) ans1++,ans2*=siz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d: %d %lld\\n\"</span>,T,ans1,ans2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;i++) point[i].clear();</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(iscut,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(iscut));<span class=\"built_in\">memset</span>(dfn,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dfn));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(low,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(low));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        solve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"「POJ2942」Knights of the Round Table","slug":"「POJ2942」Knights of the Round Table"},"next":{"title":"「POJ3352」Road Construction","slug":"「POJ3352」Road Construction"},"link":"/2018/03/08","toc":[{"title":"题目大意","id":"题目大意","index":"1"},{"title":"解析","id":"解析","index":"2"},{"title":"代码","id":"代码","index":"3"}]}