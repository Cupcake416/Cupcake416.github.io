{"title":"「POJ1741」Tree","date":"2018-03-08T05:29:59.000Z","excerpt":"","slug":"「POJ1741」Tree","updated":"2018-07-17T12:10:57.339Z","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给一棵带边权的树，求有多少点对之间距离小于等于$k$。</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>所谓点分治，就是每次选取一个根，把树分为几棵子树和一个根，于是一个树上问题就被分解为子树内的子问题和一个与根有关的问题，这样递归下去，直到问题解决。</p>\n<p>以这题为例，“与根有关的问题” 就是求经过根节点且距离小于等于$k$的路径条数。</p>\n<p>具体求法是dfs一遍把每个节点距根的距离放进一个数组排序一下，再拿两个指针扫一遍统计出答案，当然这样会把起点和终点在同一子树的不合法路径算进去，我们需要减去这些路径。</p>\n<p>这样我们就成功的分解了这个问题。</p>\n<p>为了不使时间复杂度退化，我们每次选取树的重心为根。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">10010</span>,oo=INT_MAX;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,maxd,ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,len,nxt;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> _to=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _len=<span class=\"number\">0</span>,<span class=\"keyword\">int</span> _nxt=<span class=\"number\">0</span>):to(_to),len(_len),nxt(_nxt)&#123;&#125;</span><br><span class=\"line\">&#125;edge[N&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> last[N],edge_tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> siz[N],root,f[N],tot,dep[N],dep_tot;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> l)</span></span>&#123;</span><br><span class=\"line\">    edge[++edge_tot]=Edge(t,l,last[f]);</span><br><span class=\"line\">    last[f]=edge_tot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    siz[k]=<span class=\"number\">1</span>,f[k]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=last[k];i;i=edge[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[i].to==fa||vis[edge[i].to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getroot(edge[i].to,k);</span><br><span class=\"line\">        siz[k]+=siz[edge[i].to];</span><br><span class=\"line\">        f[k]=max(f[k],siz[edge[i].to]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[k]=max(f[k],tot-siz[k]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[k]&lt;f[root]) root=k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    dep[++dep_tot]=d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=last[k];i;i=edge[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[i].to==fa||vis[edge[i].to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dfs(edge[i].to,k,d+edge[i].len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> d)</span></span>&#123;</span><br><span class=\"line\">    dep_tot=<span class=\"number\">0</span>;dfs(k,<span class=\"number\">0</span>,d);</span><br><span class=\"line\">    sort(dep+<span class=\"number\">1</span>,dep+dep_tot+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=dep_tot,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(l;l&lt;r;l++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r&amp;&amp;dep[r]+dep[l]&gt;maxd) r--;</span><br><span class=\"line\">        res+=r-l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    vis[k]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans+=calc(k,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=last[k];i;i=edge[i].nxt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[edge[i].to]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans-=calc(edge[i].to,edge[i].len);</span><br><span class=\"line\">        tot=siz[edge[i].to],root=<span class=\"number\">0</span>;</span><br><span class=\"line\">        getroot(edge[i].to,k);</span><br><span class=\"line\">        work(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(last,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(last));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    ans=edge_tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1,t2,t3;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;t1,&amp;t2,&amp;t3);add_edge(t1,t2,t3);add_edge(t2,t1,t3);&#125;</span><br><span class=\"line\">    root=<span class=\"number\">0</span>,tot=n;</span><br><span class=\"line\">    getroot(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    work(root);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">    reset();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=oo;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;maxd)) solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"「BZOJ2152」聪聪可可","slug":"「BZOJ2152」聪聪可可"},"next":{"title":"「BZOJ4031」[HEOI2015]小Z的房间","slug":"「BZOJ4031」-HEOI2015-小Z的房间"},"link":"/2018/03/08","toc":[{"title":"题目大意","id":"题目大意","index":"1"},{"title":"解析","id":"解析","index":"2"},{"title":"代码","id":"代码","index":"3"}]}